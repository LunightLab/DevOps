---
# Docker GitLab 다운타임 정리 플레이북 (안전하고 철저한 정리)
# 사용법: ansible-playbook -i inventory docker-gitlab-downtime-cleanup.yml

- name: Docker GitLab 다운타임 정리 (안전하고 철저한 최적화)
  hosts: docker_servers
  gather_facts: yes
  vars:
    gitlab_container: "gitlab"
    docker_compose_dir: "/opt/gitlab-docker"
    # 다운타임 설정
    safe_downtime_mode: true
    estimated_downtime_minutes: 7  # 예상 다운타임
    
  tasks:
    - name: ansible 로그 디렉토리 생성
      file:
        path: "{{ ansible_env.HOME }}/ansible"
        state: directory
        mode: '0755'

    - name: Docker 명령어 경로 확인 (macOS 호환)
      shell: |
        if command -v /opt/homebrew/bin/docker >/dev/null 2>&1; then
          echo "homebrew_docker"
          /opt/homebrew/bin/docker ps
        elif command -v /Applications/Docker.app/Contents/Resources/bin/docker >/dev/null 2>&1; then
          echo "desktop_docker"
          /Applications/Docker.app/Contents/Resources/bin/docker ps
        elif command -v docker >/dev/null 2>&1; then
          echo "system_docker"
          docker ps
        else
          echo "no_docker"
          exit 1
        fi
      register: docker_path_check
      ignore_errors: yes
      failed_when: false

    - name: Docker 명령어 경로 설정
      set_fact:
        docker_cmd: >-
          {%- if docker_path_check.stdout_lines[0] == 'homebrew_docker' -%}
          /opt/homebrew/bin/docker
          {%- elif docker_path_check.stdout_lines[0] == 'desktop_docker' -%}
          /Applications/Docker.app/Contents/Resources/bin/docker
          {%- elif docker_path_check.stdout_lines[0] == 'system_docker' -%}
          docker
          {%- else -%}
          docker
          {%- endif -%}

    - name: Docker 실행 상태 확인
      fail:
        msg: "Docker가 실행되지 않았습니다. Docker Desktop을 시작해주세요."
      when: docker_path_check.rc != 0

    - name: 다운타임 정리 시작 전 안내
      pause:
        prompt: |
          🛑 GitLab 다운타임 정리 작업 🛑
          
          이 작업은 GitLab을 안전하게 정지한 후 철저한 정리를 수행합니다:
          
          🔧 수행 작업:
          ✅ GitLab 서비스 안전한 정지
          ✅ GitLab 내부 데이터 철저한 정리
          ✅ Docker 로그 파일 완전 정리
          ✅ Docker 시스템 메모리 최적화
          ✅ 사용하지 않는 Docker 리소스 정리
          ✅ GitLab 서비스 깔끔한 재시작
          
          🔒 보호 항목:
          ❌ GitLab 컨테이너/이미지 삭제 안함
          ❌ GitLab 데이터 볼륨 건드리지 않음
          ❌ 백업 작업 안함 (별도 관리)
          
          ⏰ 예상 다운타임: {{ estimated_downtime_minutes }}분
          💾 예상 용량 절약: 2-5GB
          
          현재 시간: {{ ansible_date_time.iso8601 }}
          
          계속 진행하시겠습니까? (yes/no)
      register: proceed_confirmation

    - name: 확인 검증
      fail:
        msg: "사용자가 작업을 취소했습니다."
      when: proceed_confirmation.user_input | lower != 'yes'

    - name: 다운타임 시작 기록
      set_fact:
        downtime_start: "{{ ansible_date_time.epoch }}"
        downtime_start_readable: "{{ ansible_date_time.iso8601 }}"

    - name: 정리 전 상태 수집
      block:
        - name: Docker 디스크 사용량 확인 (정리 전)
          command: "{{ docker_cmd }} system df"
          register: docker_df_before
          
        - name: GitLab 볼륨 상세 분석
          shell: |
            echo "=== GitLab Docker 볼륨 상세 분석 ==="
            
            # GitLab 볼륨들의 실제 크기 확인
            for volume in $({{ docker_cmd }} volume ls -q | grep gitlab); do
              volume_size=$({{ docker_cmd }} system df -v | grep "$volume" | awk '{print $3}' || echo "N/A")
              echo "볼륨 $volume: $volume_size"
            done
            
            echo ""
            echo "=== GitLab 컨테이너 내부 용량 분석 ==="
            {{ docker_cmd }} exec {{ gitlab_container }} df -h 2>/dev/null || echo "컨테이너 응답 없음"
            
            echo ""
            echo "=== GitLab 데이터 디렉토리 TOP 10 ==="
            {{ docker_cmd }} exec {{ gitlab_container }} du -sh /var/opt/gitlab/* 2>/dev/null | sort -hr | head -10 || echo "분석 불가"
          register: gitlab_volume_analysis_before
          ignore_errors: yes

        - name: Docker 시스템 상태 분석
          shell: |
            echo "=== Docker 시스템 분석 (정리 전) ==="
            echo "실행 중인 컨테이너: $({{ docker_cmd }} ps -q | wc -l)"
            echo "전체 컨테이너: $({{ docker_cmd }} ps -a -q | wc -l)"
            echo "이미지 개수: $({{ docker_cmd }} images -q | wc -l)"
            echo "볼륨 개수: $({{ docker_cmd }} volume ls -q | wc -l)"
            echo "GitLab 볼륨: $({{ docker_cmd }} volume ls -q | grep gitlab | wc -l)"
            echo "Dangling 이미지: $({{ docker_cmd }} images -f dangling=true -q | wc -l)"
            echo "중지된 컨테이너: $({{ docker_cmd }} ps -a -f status=exited -q | wc -l)"
            echo "사용하지 않는 볼륨: $({{ docker_cmd }} volume ls -f dangling=true -q | wc -l)"
          register: docker_system_before

    - name: GitLab 서비스 안전한 정지
      block:
        - name: 현재 GitLab 상태 확인
          shell: "{{ docker_cmd }} ps --filter name={{ gitlab_container }} --format 'table {{ '{{' }}.Names{{ '}}' }}\t{{ '{{' }}.Status{{ '}}' }}'"
          register: gitlab_status_before_stop
          
        - name: GitLab 컨테이너 안전한 정지 (컨테이너 보존)
          shell: |
            echo "🛑 GitLab 컨테이너 안전한 정지 중..."
            
            # 현재 컨테이너 ID 저장 (복구를 위해)
            gitlab_container_id=$({{ docker_cmd }} ps --filter name={{ gitlab_container }} -q)
            echo "GitLab 컨테이너 ID: $gitlab_container_id"
            
            if [ -n "$gitlab_container_id" ]; then
              echo "GitLab 컨테이너를 정지합니다..."
              {{ docker_cmd }} stop {{ gitlab_container }}
              
              echo "⏳ GitLab 정지 확인 중..."
              sleep 15
              
              # 정지 후에도 컨테이너가 존재하는지 확인
              if {{ docker_cmd }} ps -a --filter name={{ gitlab_container }} -q | grep -q .; then
                echo "✅ GitLab 컨테이너 정지 완료 (컨테이너 보존됨)"
              else
                echo "❌ 경고: GitLab 컨테이너가 사라졌습니다!"
                exit 1
              fi
            else
              echo "⚠️ GitLab 컨테이너를 찾을 수 없습니다."
              exit 1
            fi
            
            echo "✅ GitLab 안전한 정지 완료"
          register: gitlab_safe_stop_result
          environment:
            PATH: "/opt/homebrew/bin:/Applications/Docker.app/Contents/Resources/bin:{{ ansible_env.PATH }}"
          
        - name: GitLab 컨테이너 존재 및 정지 상태 확인
          shell: |
            echo "🔍 GitLab 컨테이너 상태 확인..."
            
            # 컨테이너 존재 여부 확인
            if {{ docker_cmd }} ps -a --filter name={{ gitlab_container }} -q | grep -q .; then
              container_status=$({{ docker_cmd }} ps -a --filter name={{ gitlab_container }} --format '{{ "{{" }}.Status{{ "}}" }}')
              echo "✅ GitLab 컨테이너 존재: $container_status"
              
              # 실행 중인지 확인
              if {{ docker_cmd }} ps --filter name={{ gitlab_container }} -q | grep -q .; then
                echo "❌ GitLab이 아직 실행 중입니다!"
                exit 1
              else
                echo "✅ GitLab이 정지되었습니다."
              fi
            else
              echo "❌ 심각한 오류: GitLab 컨테이너가 완전히 사라졌습니다!"
              echo "복구가 필요합니다."
              exit 1
            fi
          register: gitlab_container_check
          failed_when: gitlab_container_check.rc != 0

    - name: GitLab 내부 데이터 철저한 정리 (다운타임 중)
      block:
        - name: GitLab 볼륨 직접 정리 (컨테이너 정지 상태)
          shell: |
            echo "🧹 GitLab 볼륨 직접 정리 시작..."
            
            # GitLab 볼륨들에 직접 접근하여 정리
            for volume in $({{ docker_cmd }} volume ls -q | grep gitlab); do
              echo "정리 중: $volume"
              
              # 임시 컨테이너로 볼륨 마운트하여 정리
              {{ docker_cmd }} run --rm -v ${volume}:/data alpine sh -c "
                echo '  - 임시 파일 정리...'
                find /data -name '*.tmp' -type f -delete 2>/dev/null || true
                find /data -name 'tmp' -type d -exec rm -rf {}/* \; 2>/dev/null || true
                
                echo '  - 로그 아카이브 정리...'
                find /data -name '*.log.gz' -mtime +30 -delete 2>/dev/null || true
                find /data -name '*.log.*' -mtime +7 -delete 2>/dev/null || true
                
                echo '  - 캐시 디렉토리 정리...'
                find /data -name 'cache' -type d -exec rm -rf {}/* \; 2>/dev/null || true
                find /data -name 'tmp' -type d -exec rm -rf {}/tmp/* \; 2>/dev/null || true
                
                echo '  - 세션 파일 정리...'
                find /data -name 'sessions' -type d -exec rm -rf {}/session* \; 2>/dev/null || true
                
                echo '  - 백업 파일 정리 (7일 이상)...'
                find /data -name '*.tar' -mtime +7 -delete 2>/dev/null || true
                find /data -name 'backup_*' -mtime +7 -delete 2>/dev/null || true
              " 2>/dev/null || echo "  - $volume 정리 중 일부 오류 (정상)"
            done
            
            echo "✅ GitLab 볼륨 직접 정리 완료"
          register: gitlab_volume_direct_cleanup

    - name: Docker 시스템 완전 정리 (다운타임 활용)
      block:
        - name: Docker 로그 파일 완전 정리
          shell: |
            echo "📝 Docker 로그 파일 완전 정리 시작..."
            
            total_cleaned_mb=0
            log_backup_dir="{{ ansible_env.HOME }}/docker-log-backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$log_backup_dir"
            
            # 모든 컨테이너 로그 정리 (GitLab 정지 상태이므로 안전)
            for container in $({{ docker_cmd }} ps -a --format "{{ '{{' }}.Names{{ '}}' }}"); do
              log_path=$({{ docker_cmd }} inspect --format='{{ '{{' }}.LogPath{{ '}}' }}' $container 2>/dev/null)
              if [ -f "$log_path" ]; then
                log_size=$(stat -f%z "$log_path" 2>/dev/null || echo "0")
                log_size_mb=$((log_size / 1024 / 1024))
                
                if [ $log_size_mb -gt 10 ]; then  # 10MB 이상 모두 정리 (더 적극적)
                  echo "정리: $container (${log_size_mb}MB)"
                  
                  # 최근 100줄만 백업 (용량 최소화)
                  tail -100 "$log_path" > "$log_backup_dir/${container}_last100.log" 2>/dev/null || true
                  
                  # 로그 파일 완전 초기화 (다운타임이므로 안전)
                  echo "" > "$log_path" 2>/dev/null || true
                  total_cleaned_mb=$((total_cleaned_mb + log_size_mb))
                else
                  echo "스킵: $container (${log_size_mb}MB)"
                fi
              fi
            done
            
            echo "✅ Docker 로그 완전 정리 완료 (${total_cleaned_mb}MB 절약)"
            echo "백업 위치: $log_backup_dir"
          register: docker_log_complete_cleanup

        - name: Docker 시스템 안전한 정리 (컨테이너 삭제 제외)
          shell: |
            echo "💾 Docker 시스템 안전한 정리 시작..."
            
            # ⚠️ 컨테이너 삭제는 하지 않음 (너무 위험)
            echo "⚠️ 컨테이너 삭제는 건너뜀 (안전을 위해)"
            
            # 1. Dangling 이미지만 정리 (안전함)
            echo "1. Dangling 이미지 정리..."
            dangling_images=$({{ docker_cmd }} images -f dangling=true -q)
            if [ -n "$dangling_images" ]; then
              echo "$dangling_images" | xargs {{ docker_cmd }} rmi -f 2>/dev/null || true
              echo "✅ Dangling 이미지 정리 완료"
            else
              echo "정리할 Dangling 이미지 없음"
            fi
            
            # 2. Docker 빌드 캐시 정리 (안전함)
            echo "2. Docker 빌드 캐시 정리..."
            {{ docker_cmd }} builder prune -a -f
            
            # 3. 사용하지 않는 네트워크 정리 (안전함)
            echo "3. 사용하지 않는 네트워크 정리..."
            {{ docker_cmd }} network prune -f
            
            # 4. 사용하지 않는 볼륨 정리 (GitLab 볼륨 보호)
            echo "4. 사용하지 않는 볼륨 정리 (GitLab 볼륨 보호)..."
            gitlab_volumes=$({{ docker_cmd }} volume ls -q | grep gitlab | tr '\n' '|' | sed 's/|$//')
            if [ -n "$gitlab_volumes" ]; then
              dangling_volumes=$({{ docker_cmd }} volume ls -f dangling=true -q | grep -vE "$gitlab_volumes" || echo "")
            else
              dangling_volumes=$({{ docker_cmd }} volume ls -f dangling=true -q || echo "")
            fi
            
            if [ -n "$dangling_volumes" ]; then
              echo "정리할 볼륨: $dangling_volumes"
              echo "$dangling_volumes" | xargs {{ docker_cmd }} volume rm 2>/dev/null || true
              echo "✅ 사용하지 않는 볼륨 정리 완료"
            else
              echo "정리할 사용하지 않는 볼륨 없음"
            fi
            
            echo "✅ Docker 시스템 안전한 정리 완료!"
            echo "⚠️ 컨테이너와 이미지는 보존되었습니다."
          register: docker_system_safe_cleanup

        - name: Docker 시스템 전체 정리 (최종)
          shell: |
            echo "🔧 Docker 시스템 최종 정리..."
            
            # Docker 시스템 전체 정리 (사용하지 않는 모든 것)
            {{ docker_cmd }} system prune -f
            
            echo "✅ Docker 시스템 최종 정리 완료!"
          register: docker_final_cleanup

    - name: GitLab 서비스 깔끔한 재시작
      block:
        - name: GitLab 컨테이너 안전한 재시작
          shell: |
            echo "🚀 GitLab 컨테이너 재시작 중..."
            
            # 먼저 컨테이너가 존재하는지 확인
            if {{ docker_cmd }} ps -a --filter name={{ gitlab_container }} -q | grep -q .; then
              echo "✅ GitLab 컨테이너 발견됨"
              
              # Docker 직접 시작 (더 안전)
              {{ docker_cmd }} start {{ gitlab_container }}
              
              echo "⏳ GitLab 시작 대기 중..."
              sleep 30
              
              # 시작 확인
              if {{ docker_cmd }} ps --filter name={{ gitlab_container }} -q | grep -q .; then
                echo "✅ GitLab 컨테이너 시작 성공"
              else
                echo "⚠️ 컨테이너 시작 실패, Docker Compose로 재시도..."
                cd {{ docker_compose_dir }}
                {{ docker_cmd }} compose up -d gitlab
                sleep 30
              fi
            else
              echo "❌ GitLab 컨테이너가 없습니다. Docker Compose로 재생성..."
              cd {{ docker_compose_dir }}
              {{ docker_cmd }} compose up -d gitlab
              sleep 60
            fi
            
            echo "✅ GitLab 재시작 프로세스 완료"
          register: gitlab_safe_restart_result
          environment:
            PATH: "/opt/homebrew/bin:/Applications/Docker.app/Contents/Resources/bin:{{ ansible_env.PATH }}"

        - name: GitLab 최종 상태 확인 및 복구
          shell: |
            echo "🔍 GitLab 최종 상태 확인..."
            
            # 컨테이너 존재 및 실행 상태 확인
            if {{ docker_cmd }} ps --filter name={{ gitlab_container }} -q | grep -q .; then
              container_status=$({{ docker_cmd }} ps --filter name={{ gitlab_container }} --format '{{ "{{" }}.Status{{ "}}" }}')
              echo "✅ GitLab 컨테이너 실행 중: $container_status"
              
              # 헬스체크 시도 (단축버전 - 1분만)
              echo "헬스체크 시도 중..."
              for i in {1..6}; do
                if curl -f -s http://localhost/-/liveness >/dev/null 2>&1; then
                  echo "✅ GitLab 헬스체크 성공 ($i/6 시도)"
                  break
                elif curl -f -s http://localhost/-/readiness >/dev/null 2>&1; then
                  echo "✅ GitLab 준비 상태 확인 ($i/6 시도)"
                  break
                elif curl -f -s http://localhost/ | grep -i gitlab >/dev/null 2>&1; then
                  echo "✅ GitLab 웹 서비스 응답 ($i/6 시도)"
                  break
                else
                  echo "⏳ GitLab 시작 대기 중... ($i/6)"
                  sleep 10
                fi
              done
            else
              echo "❌ GitLab 컨테이너가 실행되지 않았습니다!"
              echo "수동 복구가 필요합니다: cd {{ docker_compose_dir }} && docker compose up -d"
              exit 1
            fi
            
            echo "GitLab 상태 확인 완료"
          register: gitlab_final_health_check
          ignore_errors: yes

    - name: 다운타임 종료 및 결과 수집
      block:
        - name: 다운타임 종료 기록
          set_fact:
            downtime_end: "{{ ansible_date_time.epoch }}"
            downtime_end_readable: "{{ ansible_date_time.iso8601 }}"
            actual_downtime_minutes: "{{ ((ansible_date_time.epoch | int) - (downtime_start | int)) // 60 }}"

        - name: 정리 후 상태 확인
          command: "{{ docker_cmd }} system df"
          register: docker_df_after
          
        - name: 정리 후 Docker 시스템 상태
          shell: |
            echo "=== Docker 시스템 분석 (정리 후) ==="
            echo "실행 중인 컨테이너: $({{ docker_cmd }} ps -q | wc -l)"
            echo "전체 컨테이너: $({{ docker_cmd }} ps -a -q | wc -l)"
            echo "이미지 개수: $({{ docker_cmd }} images -q | wc -l)"
            echo "볼륨 개수: $({{ docker_cmd }} volume ls -q | wc -l)"
            echo "GitLab 볼륨: $({{ docker_cmd }} volume ls -q | grep gitlab | wc -l)"
            echo "Dangling 이미지: $({{ docker_cmd }} images -f dangling=true -q | wc -l)"
            echo "중지된 컨테이너: $({{ docker_cmd }} ps -a -f status=exited -q | wc -l)"
            echo "사용하지 않는 볼륨: $({{ docker_cmd }} volume ls -f dangling=true -q | wc -l)"
          register: docker_system_after

    - name: GitLab 다운타임 정리 완료 리포트
      set_fact:
        downtime_cleanup_report: |
          ==========================================
          🛑 GitLab 다운타임 정리 완료! ✅
          ==========================================
          
          🖥️ 서버: {{ inventory_hostname }}
          ⏰ 다운타임 시작: {{ downtime_start_readable }}
          ⏰ 다운타임 종료: {{ downtime_end_readable }}
          ⏱️ 실제 다운타임: {{ actual_downtime_minutes }}분
          
          === 용량 변화 비교 ===
          📊 정리 전:
          {{ docker_df_before.stdout }}
          
          📊 정리 후:
          {{ docker_df_after.stdout }}
          
          === Docker 시스템 변화 ===
          정리 전: {{ docker_system_before.stdout }}
          
          정리 후: {{ docker_system_after.stdout }}
          
          === 수행된 다운타임 최적화 ===
          ✅ GitLab 서비스 안전한 정지 및 재시작
          ✅ GitLab 볼륨 직접 접근 정리
          ✅ Docker 로그 파일 완전 정리
          ✅ Docker 시스템 메모리 최적화
          ✅ Dangling 이미지/컨테이너 완전 정리
          ✅ 사용하지 않는 리소스 철저한 정리
          
          === 보존된 항목 (완전 보호) ===
          🔒 GitLab 컨테이너 및 이미지
          🔒 모든 GitLab 데이터 볼륨
          🔒 GitLab 설정 및 중요 로그
          
          === GitLab 서비스 상태 ===
          {{ gitlab_health_final.stdout if gitlab_health_final is defined else '확인 필요' }}
          
          === 상세 정리 결과 ===
          볼륨 정리: {{ gitlab_volume_direct_cleanup.stdout_lines | join(' ') if gitlab_volume_direct_cleanup is defined }}
          
          로그 정리: {{ docker_log_complete_cleanup.stdout_lines | select('match', '.*절약.*') | list | join(' ') if docker_log_complete_cleanup is defined }}
          
          === 다음 권장 작업 ===
          💡 정기적인 다운타임 정리: 월 1회 실행 권장
          💡 GitLab 서비스 상태 모니터링
          💡 용량 사용량 주기적 확인
          💡 백업 별도 관리 유지
          ==========================================

    - name: 결과 리포트 출력
      debug:
        var: downtime_cleanup_report

    - name: 다운타임 정리 로그 저장
      copy:
        content: |
          GitLab 다운타임 정리 로그
          ========================
          실행 시간: {{ ansible_date_time.iso8601 }}
          서버: {{ inventory_hostname }}
          Docker 경로: {{ docker_cmd }}
          작업 유형: 다운타임 정리 (안전하고 철저한 최적화)
          
          === 다운타임 정보 ===
          시작 시간: {{ downtime_start_readable }}
          종료 시간: {{ downtime_end_readable }}
          실제 다운타임: {{ actual_downtime_minutes }}분
          예상 다운타임: {{ estimated_downtime_minutes }}분
          
          === 정리 전 상태 ===
          {{ docker_df_before.stdout }}
          
          시스템 상태 (정리 전):
          {{ docker_system_before.stdout }}
          
          === 정리 후 상태 ===
          {{ docker_df_after.stdout }}
          
          시스템 상태 (정리 후):
          {{ docker_system_after.stdout }}
          
          === 상세 정리 작업 ===
          볼륨 직접 정리:
          {{ gitlab_volume_direct_cleanup.stdout if gitlab_volume_direct_cleanup is defined else '실행되지 않음' }}
          
          로그 완전 정리:
          {{ docker_log_complete_cleanup.stdout if docker_log_complete_cleanup is defined else '실행되지 않음' }}
          
          시스템 최적화:
          {{ docker_system_optimization.stdout if docker_system_optimization is defined else '실행되지 않음' }}
          
          === GitLab 재시작 결과 ===
          {{ gitlab_restart_result.stdout if gitlab_restart_result is defined else '확인 필요' }}
          
          === 헬스체크 결과 ===
          {{ gitlab_health_final.stdout if gitlab_health_final is defined else '확인 필요' }}
          
          === 안전 정책 ===
          ✅ GitLab 컨테이너/이미지 완전 보호
          ✅ GitLab 데이터 볼륨 완전 보호
          ✅ 안전한 서비스 정지/재시작
          ✅ 다운타임 중 철저한 정리
          ✅ 서비스 상태 완전 복구 확인
          
          === 권장사항 ===
          - 다운타임 정리는 월 1회 실행 권장
          - 새벽 시간대 (02:00-04:00) 실행 권장
          - 정리 전 백업 상태 확인 필수
          - 정리 후 서비스 동작 확인 필수
        dest: "{{ ansible_env.HOME }}/ansible/gitlab-downtime-cleanup-{{ ansible_date_time.date }}.log"
        mode: '0644'