---
- name: Mac 서버 초기 설치
  hosts: all_macs
  gather_facts: yes
  # vars 섹션 제거 - group_vars/all.yml에서 로드됨
      
  tasks:
    - name: 현재 시스템 정보 출력
      debug:
        msg: |
          === Mac 서버 초기 설치 ===
          서버: {{ inventory_hostname }}
          사용자: {{ ansible_user }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          아키텍처: {{ ansible_architecture }}

    - name: Homebrew 설치 확인 (경로 포함)
      shell: ls -la /opt/homebrew/bin/brew
      register: brew_check
      ignore_errors: yes

    - name: Homebrew 상태 출력
      debug:
        msg: "Homebrew {{ 'exists' if brew_check.rc == 0 else 'not found' }}"

    - name: Homebrew 수동 설치 안내
      debug:
        msg: |
          ⚠️  Homebrew가 설치되지 않았습니다!
          
          각 서버에 SSH로 접속해서 수동 설치하세요:
          ssh -i ~/.ssh/ansible_key {{ ansible_user }}@{{ ansible_host }}
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          
          설치 후 이 플레이북을 다시 실행하세요.
      when: brew_check.rc != 0

    - name: .zshrc 파일 생성 및 PATH 설정
      blockinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        marker: "# {mark} HOMEBREW SETUP"
        block: |
          # Homebrew PATH 설정
          eval "$(/opt/homebrew/bin/brew shellenv)"
          
          # Docker CLI PATH 설정 (Docker Desktop)
          export PATH="/Applications/Docker.app/Contents/Resources/bin:$PATH"
        create: yes

    - name: 공통 기본 패키지 설치
      homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ common_packages }}"  # group_vars/all.yml에서 로드
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"

    - name: 공통 디렉토리 생성
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop: "{{ common_directories }}"  # group_vars/all.yml에서 로드

- name: iOS CI 서버 전용 패키지 설치
  hosts: ci_servers
  # vars 섹션 제거 - group_vars/ci_servers.yml에서 로드됨
      
  tasks:
    - name: iOS 개발 도구 설치
      homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ ios_packages }}"  # group_vars/ci_servers.yml에서 로드
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"

    - name: iOS 프로젝트 디렉토리 생성
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop: "{{ ios_directories }}"  # group_vars/ci_servers.yml에서 로드

- name: Android 서버 전용 패키지 설치
  hosts: docker_servers
  # vars 섹션 제거 - group_vars/docker_servers.yml에서 로드됨
      
  tasks:
    - name: Android 개발 도구 설치
      homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ android_packages }}"  # group_vars/docker_servers.yml에서 로드
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"

    - name: Docker Desktop 설치 확인
      stat:
        path: "/Applications/Docker.app"
      register: docker_app_exists

    - name: Docker Desktop 설치 (필요한 경우만)
      homebrew_cask:
        name: docker
        state: present
      when: not docker_app_exists.stat.exists
      register: docker_install
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"

    - name: Android 프로젝트 디렉토리 생성
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop: "{{ android_directories }}"  # group_vars/docker_servers.yml에서 로드

    - name: Docker Desktop 시작 안내
      debug:
        msg: |
          {% if docker_app_exists.stat.exists %}
          ✅ Docker Desktop이 이미 설치되어 있습니다!
          {% elif docker_install is defined and docker_install.changed %}
          ✅ Docker Desktop 설치가 완료되었습니다!
          {% endif %}
          
          🐳 다음 단계:
          1. Applications 폴더에서 Docker 앱을 실행하세요
          2. Docker Desktop이 완전히 시작될 때까지 대기 (2-3분)
          3. 새 터미널에서 'docker ps' 명령어 테스트
          
          ✅ Docker 준비 확인 명령어:
          ansible {{ inventory_hostname }} -a "docker ps"

- name: Oh My Zsh 및 agnoster 테마 설정
  hosts: all_macs
  tasks:
    - name: Oh My Zsh 설치 확인
      stat:
        path: "{{ ansible_env.HOME }}/.oh-my-zsh"
      register: omz_exists

    - name: Oh My Zsh 설치 (필요시)
      shell: |
        sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      when: not omz_exists.stat.exists

    - name: Oh My Zsh 플러그인 설치
      git:
        repo: "{{ omz_plugins[item].repo }}"
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/{{ omz_plugins[item].dest }}"
        clone: yes
        update: yes
      loop:
        - zsh-autosuggestions
        - zsh-syntax-highlighting

    - name: agnoster 테마 및 통합 설정
      copy:
        content: |
          # Oh My Zsh 설정
          export ZSH="$HOME/.oh-my-zsh"
          ZSH_THEME="agnoster"
          
          # 플러그인 설정
          plugins=(git zsh-autosuggestions zsh-syntax-highlighting)
          
          # Oh My Zsh 로드
          source $ZSH/oh-my-zsh.sh
          
          # Homebrew PATH 설정
          eval "$(/opt/homebrew/bin/brew shellenv)"
          
          # Docker CLI PATH 설정 (Docker Desktop)
          export PATH="/Applications/Docker.app/Contents/Resources/bin:$PATH"
          
          # agnoster 테마 설정
          DEFAULT_USER="{{ ansible_user }}"
          
          # 유용한 aliases
          alias ll='ls -la'
          alias la='ls -A'
          alias ..='cd ..'
          alias ...='cd ../..'
          alias brewup='brew update && brew upgrade && brew cleanup'
          alias jenkins-start='brew services start jenkins-lts'
          alias jenkins-stop='brew services stop jenkins-lts'
          alias jenkins-status='brew services list | grep jenkins'
          
          # Docker 관련 aliases
          alias dps='docker ps'
          alias dpa='docker ps -a'
          alias di='docker images'
          alias dc='docker compose'
          alias dcup='docker compose up -d'
          alias dcdown='docker compose down'
          alias dclogs='docker compose logs -f'
        dest: "{{ ansible_env.HOME }}/.zshrc"
        mode: '0644'
        
- name: 설치 완료 확인
  hosts: all_macs
  tasks:
    - name: 설치된 패키지 확인
      shell: /opt/homebrew/bin/brew list --formula
      register: installed_packages
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"

    - name: 설치된 Cask 애플리케이션 확인 (Docker 서버)
      shell: /opt/homebrew/bin/brew list --cask
      register: installed_casks
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      when: inventory_hostname in groups['docker_servers']

    - name: 설치 완료 메시지
      debug:
        msg: |
          =================================
          {{ inventory_hostname }} 설치 완료!
          설치된 패키지 수: {{ installed_packages.stdout_lines | length }}
          {% if inventory_hostname in groups['docker_servers'] and installed_casks is defined %}
          설치된 Cask 앱: {{ installed_casks.stdout_lines | length }}개
          {% endif %}
          agnoster 테마 적용됨!
          {% if inventory_hostname in groups['docker_servers'] %}
          
          🐳 Docker Desktop 설치됨!
          다음 단계: Docker Desktop 앱을 실행하세요
          {% endif %}
          =================================