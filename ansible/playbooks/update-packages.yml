---
- name: 패키지 업데이트 및 관리
  hosts: all_macs
  gather_facts: yes
  vars_files:
    - group_vars/all.yml
    
  tasks:
    - name: 업데이트 시작 메시지
      debug:
        msg: |
          ==========================================
          {{ inventory_hostname }} 패키지 업데이트 시작
          현재 시간: {{ ansible_date_time.iso8601 }}
          ==========================================

    - name: 현재 설치된 패키지 버전 백업
      shell: /opt/homebrew/bin/brew list --versions
      register: packages_before
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"

    - name: ansible 로그 디렉토리 생성
      file:
        path: "{{ ansible_env.HOME }}/ansible"
        state: directory
        mode: '0755'

    - name: 백업 파일 저장
      copy:
        content: "{{ packages_before.stdout }}"
        dest: "{{ ansible_env.HOME }}/ansible/package-versions-before-{{ ansible_date_time.date }}.txt"
        mode: '0644'

    - name: Homebrew 저장소 업데이트
      shell: /opt/homebrew/bin/brew update
      environment: "{{ homebrew_env }}"
      register: brew_update_result
      ignore_errors: yes

    - name: 업데이트 가능한 패키지 확인
      shell: /opt/homebrew/bin/brew outdated
      register: outdated_packages
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      ignore_errors: yes

    - name: 업데이트 가능한 패키지 목록 출력
      debug:
        msg: |
          업데이트 가능한 패키지:
          {{ outdated_packages.stdout_lines | default(['없음']) }}

    # Docker 실행 상태 미리 확인 (docker_servers 그룹에서만)
    - name: Docker 실행 상태 확인 (docker_servers만)
      shell: pgrep -f "Docker Desktop"
      register: docker_running_check
      ignore_errors: yes
      failed_when: false
      when: inventory_hostname in groups['docker_servers']

    - name: Docker가 실행 중인 경우 업데이트 건너뛰기 안내
      debug:
        msg: |
          ⚠️  Docker Desktop이 실행 중입니다!
          안전을 위해 Docker 관련 패키지만 제외하고 업데이트합니다.
          
          Docker 안전 업데이트 방법:
          1. Docker Desktop 종료
          2. ansible-playbook update-packages.yml 재실행
      when: 
        - inventory_hostname in groups['docker_servers']
        - docker_running_check.rc == 0
        - outdated_packages.stdout != ""

    # Docker 서버에서 실행 중인 컨테이너 수 확인
    - name: 실행 중인 컨테이너 수 확인
      shell: docker ps -q 2>/dev/null | wc -l | xargs
      register: running_containers_count
      ignore_errors: yes
      failed_when: false
      when: 
        - inventory_hostname in groups['docker_servers']
        - docker_running_check.rc == 0

    # Docker 관련 업데이트 가능한 패키지 확인
    - name: Docker 관련 업데이트 패키지 확인
      shell: /opt/homebrew/bin/brew outdated | grep -E "(docker|colima|docker-compose)"
      register: docker_outdated_packages
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      ignore_errors: yes
      failed_when: false
      when: inventory_hostname in groups['docker_servers']

    # 케이스 1: Docker 서버가 아닌 경우 - 전체 업데이트
    - name: 일반 서버 패키지 업그레이드
      shell: /opt/homebrew/bin/brew upgrade
      environment: "{{ homebrew_env }}"
      register: brew_upgrade_result
      ignore_errors: yes
      when: 
        - outdated_packages.stdout != ""
        - inventory_hostname not in groups['docker_servers']

    # 케이스 2: Docker 서버이지만 Docker Desktop 미실행 - 전체 업데이트
    - name: Docker 서버 전체 업그레이드 (Docker 미실행)
      shell: /opt/homebrew/bin/brew upgrade
      environment: "{{ homebrew_env }}"
      register: docker_stopped_upgrade_result
      ignore_errors: yes
      when:
        - outdated_packages.stdout != ""
        - inventory_hostname in groups['docker_servers']
        - docker_running_check.rc != 0

    # 케이스 3: Docker 실행 중이지만 컨테이너 없음 - 전체 업데이트
    - name: Docker 실행 중 but 컨테이너 없음 - 전체 업그레이드
      shell: /opt/homebrew/bin/brew upgrade
      environment: "{{ homebrew_env }}"
      register: docker_no_containers_upgrade_result
      ignore_errors: yes
      when:
        - outdated_packages.stdout != ""
        - inventory_hostname in groups['docker_servers']
        - docker_running_check.rc == 0
        - running_containers_count.stdout|default('0')|int == 0

    # 케이스 4: Docker 실행 중 + 컨테이너 있음 - Docker 패키지만 제외하고 업데이트
    - name: Docker 관련 패키지 임시 pin (업데이트 제외)
      shell: |
        DOCKER_PKGS=$(/opt/homebrew/bin/brew outdated | grep -E "(docker|colima|docker-compose)" | awk '{print $1}')
        if [ -n "$DOCKER_PKGS" ]; then
          echo "$DOCKER_PKGS" | xargs /opt/homebrew/bin/brew pin
          echo "임시 제외된 Docker 패키지: $DOCKER_PKGS"
        fi
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      register: docker_pin_result
      when:
        - outdated_packages.stdout != ""
        - inventory_hostname in groups['docker_servers']
        - docker_running_check.rc == 0
        - running_containers_count.stdout|default('0')|int > 0
        - docker_outdated_packages.stdout != ""

    - name: Docker 제외하고 나머지 패키지 업그레이드
      shell: /opt/homebrew/bin/brew upgrade
      environment: "{{ homebrew_env }}"
      register: docker_selective_upgrade_result
      ignore_errors: yes
      when:
        - outdated_packages.stdout != ""
        - inventory_hostname in groups['docker_servers']
        - docker_running_check.rc == 0
        - running_containers_count.stdout|default('0')|int > 0

    - name: Docker 관련 패키지 pin 해제
      shell: |
        DOCKER_PKGS=$(/opt/homebrew/bin/brew list --pinned | grep -E "(docker|colima|docker-compose)")
        if [ -n "$DOCKER_PKGS" ]; then
          echo "$DOCKER_PKGS" | xargs /opt/homebrew/bin/brew unpin
          echo "Pin 해제된 Docker 패키지: $DOCKER_PKGS"
        fi
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      when:
        - inventory_hostname in groups['docker_servers']
        - docker_running_check.rc == 0
        - running_containers_count.stdout|default('0')|int > 0
        - docker_pin_result is defined

    # Docker 업데이트 보류 안내
    - name: Docker 업데이트 보류 안내
      debug:
        msg: |
          🐳 Docker 관련 패키지 업데이트 보류됨
          
          현재 상태:
          - 실행 중인 컨테이너: {{ running_containers_count.stdout | default('0') }}개
          - 업데이트 대기 중: {{ docker_outdated_packages.stdout_lines | length | default(0) }}개 Docker 패키지
          
          ✅ 나머지 패키지는 정상 업데이트 완료
          
          🔄 Docker 안전 업데이트 방법:
          1. 컨테이너 안전 종료: docker-compose down
          2. Docker Desktop 종료
          3. 업데이트 재실행: ansible-playbook update-packages.yml
          4. Docker 재시작 후 컨테이너 복구
          
          또는 수동으로:
          brew upgrade docker docker-compose
      when:
        - inventory_hostname in groups['docker_servers']
        - docker_running_check.rc == 0
        - running_containers_count.stdout|default('0')|int > 0
        - docker_outdated_packages.stdout != ""

    - name: 업그레이드 완료 메시지 (업데이트 없음)
      debug:
        msg: "✅ 업그레이드할 패키지가 없습니다."
      when: outdated_packages.stdout == ""

    # deprecated 패키지 정리 작업 추가
    - name: deprecated neofetch 확인 및 정리
      shell: /opt/homebrew/bin/brew list | grep neofetch
      register: neofetch_check
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      ignore_errors: yes
      failed_when: false

    - name: neofetch 제거 (deprecated)
      shell: /opt/homebrew/bin/brew uninstall neofetch
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      when: neofetch_check.rc == 0
      ignore_errors: yes

    - name: fastfetch 설치 (neofetch 대체)
      shell: /opt/homebrew/bin/brew install fastfetch
      environment: "{{ homebrew_env }}"
      when: neofetch_check.rc == 0
      ignore_errors: yes

    - name: 불필요한 패키지 정리
      shell: /opt/homebrew/bin/brew cleanup --prune=all
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      register: brew_cleanup_result
      ignore_errors: yes

    - name: 사용하지 않는 의존성 자동 제거
      shell: /opt/homebrew/bin/brew autoremove
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      register: brew_autoremove_result
      ignore_errors: yes

    - name: Homebrew 상태 점검
      shell: /opt/homebrew/bin/brew doctor
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
      register: brew_doctor_result
      ignore_errors: yes
      failed_when: false  # doctor 경고는 실패로 처리하지 않음

    - name: 업데이트 후 패키지 버전 확인
      shell: /opt/homebrew/bin/brew list --versions
      register: packages_after
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"

    - name: 업데이트 후 버전 파일 저장
      copy:
        content: "{{ packages_after.stdout }}"
        dest: "{{ ansible_env.HOME }}/ansible/package-versions-after-{{ ansible_date_time.date }}.txt"
        mode: '0644'

    - name: 디스크 사용량 확인
      shell: df -h {{ ansible_env.HOME }}
      register: disk_usage

    - name: 시스템 상태 정보 수집
      block:
        - name: 메모리 사용량 확인
          shell: |
            vm_stat | head -10
            echo "---"
            top -l 1 -s 0 | grep "PhysMem"
          register: memory_usage

        - name: CPU 사용률 확인
          shell: top -l 1 -s 0 | grep "CPU usage"
          register: cpu_usage

        - name: 시스템 업타임 확인
          shell: uptime
          register: system_uptime

        - name: 디스크 전체 사용량 확인
          shell: df -h | grep -E "(/System/Volumes/Data|/System/Volumes/VM|disk)"
          register: disk_full_usage

        - name: 네트워크 인터페이스 상태
          shell: ifconfig | grep -E "(en[0-9]|lo[0-9])" -A 1
          register: network_status

        - name: 시스템 온도 및 전력 정보 확인
          shell: |
            # 시스템 정보 수집
            echo "=== 시스템 정보 ==="
            system_profiler SPHardwareDataType | grep -E "(Chip|Processor|Memory)" | head -3
            
            echo ""
            echo "=== 전력 관리 ==="
            pmset -g therm 2>/dev/null || echo "열 관리 정보 없음"
            
            echo ""
            echo "=== 배터리 상태 ==="
            pmset -g batt 2>/dev/null || echo "배터리 정보 없음"
            
            echo ""
            echo "=== 시스템 부하 ==="
            sysctl machdep.cpu.thermal_state 2>/dev/null || echo "온도 센서 접근 불가"
          register: system_temp
          ignore_errors: yes

        - name: Homebrew 패키지 통계
          shell: |
            echo "전체 설치된 패키지: $(/opt/homebrew/bin/brew list --formula | wc -l | xargs)"
            echo "Cask 애플리케이션: $(/opt/homebrew/bin/brew list --cask | wc -l | xargs)"
            echo "서비스 실행 중: $(/opt/homebrew/bin/brew services list | grep started | wc -l | xargs)"
          environment:
            PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"
          register: brew_stats

    - name: 실행 로그 저장
      copy:
        content: |
          ==========================================
          {{ inventory_hostname }} 업데이트 로그
          실행 시간: {{ ansible_date_time.iso8601 }}
          ==========================================
          
          📦 업데이트 가능했던 패키지: {{ outdated_packages.stdout_lines | length | default(0) }}개
          {% if outdated_packages.stdout_lines | length > 0 %}
          업데이트된 패키지 목록:
          {{ outdated_packages.stdout }}
          {% endif %}
          
          🗑️ 정리된 캐시: {{ brew_cleanup_result.stdout_lines | length | default(0) }}개 항목
          
          🧹 자동 제거된 의존성: {{ brew_autoremove_result.stdout_lines | length | default(0) }}개 패키지
          
          💾 디스크 사용량: {{ disk_usage.stdout.split() | last }}
          
          🖥️ 시스템 상태:
          {{ system_uptime.stdout }}
          {{ cpu_usage.stdout }}
          {{ memory_usage.stdout_lines[11] | default('메모리 정보 없음') }}
          
          💾 디스크 사용량:
          {{ disk_full_usage.stdout }}
          
          📦 Homebrew 통계:
          {{ brew_stats.stdout }}
          
          🌡️ 시스템 & 전력 정보:
          {{ system_temp.stdout | default('확인 불가') }}
          
          ⚠️ Homebrew Doctor 결과:
          {{ brew_doctor_result.stdout | default('정상') }}
          
          📄 백업 파일:
          - 업데이트 전: ~/ansible/package-versions-before-{{ ansible_date_time.date }}.txt
          - 업데이트 후: ~/ansible/package-versions-after-{{ ansible_date_time.date }}.txt
          
          ==========================================
          실행 완료: {{ ansible_date_time.iso8601 }}
          ==========================================
        dest: "{{ ansible_env.HOME }}/ansible/update-log-{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}.txt"
        mode: '0644'

    - name: 업데이트 완료 리포트
      debug:
        msg: |
          ==========================================
          {{ inventory_hostname }} 업데이트 완료!
          
          📦 업데이트 가능했던 패키지: {{ outdated_packages.stdout_lines | length | default(0) }}개
          🗑️  정리된 캐시: {{ brew_cleanup_result.stdout_lines | length | default(0) }}개 항목
          🧹 자동 제거된 의존성: {{ brew_autoremove_result.stdout_lines | length | default(0) }}개 패키지
          
          🖥️  시스템 상태:
          {{ system_uptime.stdout }}
          {{ cpu_usage.stdout }}
          {{ memory_usage.stdout_lines[11] | default('메모리 정보 없음') }}
          
          💾 디스크 사용량:
          {{ disk_full_usage.stdout }}
          
          📦 Homebrew 통계:
          {{ brew_stats.stdout }}
          
          🌡️  시스템 온도: {{ system_temp.stdout | default('확인 불가') }}
          
          ⚠️  Homebrew Doctor 결과:
          {{ brew_doctor_result.stdout | default('정상') }}
          
          📄 백업 파일:
          - 업데이트 전: ~/ansible/package-versions-before-{{ ansible_date_time.date }}.txt
          - 업데이트 후: ~/ansible/package-versions-after-{{ ansible_date_time.date }}.txt
          ==========================================

- name: 서비스 재시작 확인 (선택적)
  hosts: all_macs
  tasks:
    - name: Jenkins 서비스 상태 확인
      shell: /opt/homebrew/bin/brew services list | grep jenkins
      register: jenkins_status
      environment:
        PATH: "/opt/homebrew/bin:{{ ansible_env.PATH }}"

    - name: Jenkins 재시작 안내
      debug:
        msg: |
          Jenkins 상태: {{ jenkins_status.stdout }}
          
          💡 Jenkins가 업데이트되었다면 수동 재시작을 권장합니다:
          ansible {{ inventory_hostname }} -a "brew services restart jenkins-lts"
      when: "'jenkins' in outdated_packages.stdout | default('')"

- name: Docker 서버 전용 작업 (안전한 처리)
  hosts: docker_servers
  tasks:
    - name: Docker 설치 확인
      shell: which docker
      register: docker_exists
      ignore_errors: yes
      failed_when: false

    - name: Docker 버전 확인 (Docker가 있는 경우에만)
      shell: docker --version
      register: docker_version
      ignore_errors: yes
      failed_when: false
      when: docker_exists.rc == 0

    - name: Docker Desktop 실행 상태 확인
      shell: pgrep -f "Docker Desktop"
      register: docker_desktop_running
      ignore_errors: yes
      failed_when: false
      when: docker_exists.rc == 0

    - name: Docker 상태 리포트
      debug:
        msg: |
          🐳 Docker 상태 리포트:
          - Docker 명령어: {{ 'available' if docker_exists.rc == 0 else 'not found' }}
          {% if docker_exists.rc == 0 %}
          - Docker 버전: {{ docker_version.stdout | default('확인 실패') }}
          - Docker Desktop: {{ 'running' if docker_desktop_running.rc == 0 else 'not running' }}
          {% else %}
          
          💡 Docker 설치 권장사항:
          1. Docker Desktop 설치: brew install --cask docker
          2. Applications에서 Docker Desktop 실행
          3. Docker Desktop이 완전히 시작될 때까지 대기
          {% endif %}

    - name: Docker 업데이트 안내 (Docker가 있고 업데이트된 경우)
      debug:
        msg: |
          🔄 Docker가 업데이트되었습니다!
          
          권장 작업:
          1. Docker Desktop 재시작
          2. 실행 중인 컨테이너 확인: docker ps
          3. 필요시 컨테이너 재시작: docker restart <container_name>
      when: 
        - docker_exists.rc == 0
        - "'docker' in outdated_packages.stdout | default('')"